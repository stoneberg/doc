import store from '@/store

Axios.interceptors.response.use(null, error => {
  if (error.config && error.response && error.response.status === 401) {
    return getRefreshedToken().then(response => {
      store.dispatch("refresh", response.data).then(response => {
        error.config.headers = authHeader();
        return Axios.request(error.config);
      });
    });
  }

  return Promise.reject(error);
});


axios.interceptors.response.use(undefined, err => {
  let res = err.response;
  if (res.status === 401 && res.config && !res.config.__isRetryRequest) {
    return new Promise((resolve, reject) => {
      refreshLogin(getRefreshToken(),
        success => {
          setTokens(success.access_token, success.refresh_token)
          err.config.__isRetryRequest = true
          err.config.headers.Authorization = 'Bearer ' + getAccessToken()
          resolve(axios(err.config))
        },
        error => {
          console.log('Refresh login error: ', error)
          reject(error)
        }
      )
    });
  }
})

